!function(n){var l={};function i(e){if(l[e])return l[e].exports;var t=l[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.m=n,i.c=l,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var l in t)i.d(n,l,function(e){return t[e]}.bind(null,l));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s="./js/main.js")}({"./js/main.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_modules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/modules */ "./js/modules/modules.js");\n\n\n\ndocument.addEventListener(`DOMContentLoaded`, () => {\n  Object(_modules_modules__WEBPACK_IMPORTED_MODULE_0__["init"])();\n});\n\n\n//# sourceURL=webpack:///./js/main.js?')},"./js/modules/modules.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "init", function() { return init; });\nconst init = () => {\n\n  const btnAddArticle = document.querySelector(`#add-article`);\n  const btnRemoveArticle = document.querySelector(`#remove-article`);\n  const btnLookArticle = document.querySelector(`#look-article`);\n  const resultBlockNode = document.querySelector(`.article--result`);\n  const btnCopy = document.querySelector(`.button--copy`);\n  const urlRegexp = /(\\w+):\\/\\/([\\w.]+)\\/(\\S*)/;\n  let resultIsActive = false;\n  let resultBlockIsReady = false;\n  let validateIsActive = true;\n\n  // копирование готовой верстки блока\n  // флаг validateIsActive для контроля кнопки "Посмотреть результат"\n\n  const copyNode = () => {\n    if (!validateIsActive) {\n      return;\n    }\n    validateIsActive = false;\n    btnCopy.addEventListener(`click`, () => {\n      if (resultBlockIsReady) {\n        const nodeAtricle = document.querySelector(`#result-article`).outerHTML;\n        navigator.clipboard.writeText(nodeAtricle);\n        alert(`Код скопирован в буфер обмена.`);\n      } else {\n        alert(`Не все поля корретно заполнены. Копирование не выполнено.`);\n        btnCopy.setAttribute(`style`, `display: none;`);\n      }\n      validateIsActive = true;\n    });\n  };\n\n  // связка полей главного заголовка\n\n  const updateTopTitle = () => {\n    const input = document.querySelector(`#constructor-top-title`);\n    const topTitle = document.querySelector(`#result-top-title`);\n    input.addEventListener(`input`, () => {\n      topTitle.textContent = input.value.trim();\n    });\n  };\n\n  // отобразить блок с результатами\n\n  const showBlockResult = () => {\n    resultBlockNode.setAttribute(`style`, `display: block;`);\n    resultIsActive = true;\n    inputListners();\n    updateTopTitle();\n    controlInputs();\n    formatingLink();\n  };\n\n  // обработчики инпутов, работают только пока нет блока с результатами\n  // (на видео при клике в поле ввода показываются результаты)\n\n  const inputListners = () => {\n    const allInputs = document.querySelectorAll(`#article-constructor input`);\n    if (!resultIsActive) {\n\n      allInputs.forEach(item => {\n        item.addEventListener(`focus`, showBlockResult);\n      });\n\n    } else {\n      allInputs.forEach(item => {\n        item.removeEventListener(`focus`, showBlockResult);\n      });\n    }\n  };\n\n  // запуск обработчиков инпутов при открытии страницы\n\n  inputListners();\n\n  // добавление нового материала(статьи)\n\n  const addNewArticle = () => {\n    const newArticleTemplate = document.querySelector(`#new-article`);\n    const wrapperConstructor = document.querySelector(`#article-constructor`);\n\n    if (newArticleTemplate && wrapperConstructor) {\n\n      const fragment = document.createDocumentFragment();\n      let newArticle = newArticleTemplate.content.cloneNode(true);\n      fragment.appendChild(newArticle);\n      wrapperConstructor.append(fragment);\n\n      addResultLink();\n      controlInputs();\n      inputListners();\n    }\n  };\n\n  // удаление последнего материала(статьи)\n\n  const deleteArticle = () => {\n    const linkArticle = document.querySelectorAll(`.article__link`);\n    const lastTask = document.querySelectorAll(`.article__inputs-wrapper`);\n\n    if (lastTask && lastTask.length > 1) {\n      lastTask[lastTask.length - 1].remove();\n    }\n\n    if (linkArticle && linkArticle.length > 1) {\n      linkArticle[linkArticle.length - 1].remove();\n      controlInputs();\n    }\n\n    if (linkArticle && linkArticle.length === 1) {\n      resultBlockNode.setAttribute(`style`, `display: none;`);\n      btnCopy.setAttribute(`style`, `display: none;`);\n      resultIsActive = false;\n      inputListners();\n    }\n  };\n\n  // добавление ссылки на новую статью\n\n  const addResultLink = () => {\n    const linkTemplate = document.querySelector(`#link-to-article`);\n    const blockArticle = document.querySelector(`#result-article`);\n\n    if (linkTemplate && blockArticle) {\n      const fragment = document.createDocumentFragment();\n      let newArticle = linkTemplate.content.cloneNode(true);\n      fragment.appendChild(newArticle);\n      blockArticle.append(fragment);\n    }\n\n    // обработчик кнопки редактирование ссылки\n    formatingLink();\n  };\n\n  // связывание инпутов конструктора и полей с результатами\n\n  const controlInputs = () => {\n    const fields = document.querySelectorAll(`[data-input-fields]`);\n    const linkTitles = document.querySelectorAll(`[data-link-article]`);\n\n    for (let i = 0; i < fields.length; i++) {\n      const inputTitle = fields[i].querySelector(`.input__field--title`);\n      const inputSubTitle = fields[i].querySelector(`.input__field--subtitle`);\n      const redactLink = fields[i].querySelector(`.input__field--link`);\n      const title = linkTitles[i].querySelector(`.article__title`);\n      const subTitle = linkTitles[i].querySelector(`.article__subtitle`);\n      const link = linkTitles[i].querySelector(`.article__description`);\n\n      inputTitle.addEventListener(`input`, () => {\n        title.textContent = inputTitle.value.trim();\n        if (title.textContent) {\n          title.classList.remove(`article__title--warning`);\n          title.setAttribute(`data-content`, `true`);\n        } else {\n          title.classList.add(`article__title--warning`);\n          title.textContent = `Введите заголовок`;\n        }\n      });\n\n      inputSubTitle.addEventListener(`input`, () => {\n        subTitle.textContent = inputSubTitle.value.trim();\n      });\n\n      redactLink.addEventListener(`input`, () => {\n        link.textContent = redactLink.value.trim();\n        if (link.textContent) {\n          link.classList.remove(`article__description--result`);\n        } else {\n          link.classList.add(`article__description--result`);\n        }\n      });\n    }\n  };\n\n  // обработка вставленной ссылки\n\n  const formatingLink = () => {\n    const bloksConstructor = document.querySelectorAll(`.article__inputs-wrapper`);\n    const linksDescription = document.querySelectorAll(`[data-link-article]`);\n\n    for (let i = 0; i < bloksConstructor.length; i++) {\n      const btn = bloksConstructor[i].querySelector(`[data-format-link]`);\n      const nodeDes = linksDescription[i].querySelector(`.article__description`);\n      const field = bloksConstructor[i].querySelector(`[data-input-link]`);\n      const warningElement = linksDescription[i].querySelector(`[data-link-warning]`);\n\n      btn.addEventListener(`click`, () => {\n        const isContent = urlRegexp.test(field.value.trim());\n\n        if (isContent) {\n          nodeDes.textContent = field.value.trim().match(urlRegexp)[2];\n          nodeDes.classList.remove(`article__description--result`);\n          warningElement.setAttribute(`style`, `display: none`);\n          linksDescription[i].setAttribute(`href`, field.value.trim());\n          linksDescription[i].setAttribute(`data-content`, `true`);\n        } else {\n          nodeDes.classList.add(`article__description--result`);\n          warningElement.setAttribute(`style`, `display: block`);\n          warningElement.textContent = `Неверный формат ссылки`;\n        }\n      });\n    }\n  };\n\n  // проверка заполненности всех полей\n  const validate = () => {\n    const contents = [...document.querySelectorAll(`[data-content]`)];\n\n    const errorList = contents.filter(item => {\n      return item.getAttribute(`data-content`) === `false`;\n    });\n\n    resultBlockIsReady = errorList.length === 0 ? true : false;\n  };\n\n  // обработчики кнопок добавить, удалить и посмотреть материал\n\n  btnAddArticle.addEventListener(`click`, addNewArticle);\n  btnRemoveArticle.addEventListener(`click`, deleteArticle);\n\n  btnLookArticle.addEventListener(`click`, () => {\n\n    if (!resultIsActive) {\n      resultBlockNode.setAttribute(`style`, `display: block;`);\n      btnCopy.setAttribute(`style`, `display: block;`);\n      resultIsActive = true;\n      inputListners();\n      updateTopTitle();\n      controlInputs();\n      formatingLink();\n      validate();\n      copyNode();\n\n    } else {\n      btnCopy.setAttribute(`style`, `display: block;`);\n      validate();\n      copyNode();\n    }\n  });\n};\n\n\n\n\n//# sourceURL=webpack:///./js/modules/modules.js?')}});